version: "3.9"
services:
  
  lab-gateway:
    container_name: lab-gateway
    image: lab-gateway:dev
    build:
      context: ../src
      dockerfile: ../src/lab.gateway/Dockerfile
    #networks:
      #- lab-network
    env_file:
      - ./env-file/gateway-otel.env
    volumes:
      - ./gateway-config/ReverseProxy-ClustersSetting.json:/app/ReverseProxy-ClustersSetting.json
      - ./gateway-config/ReverseProxy-RoutesSetting.json:/app/ReverseProxy-RoutesSetting.json
    depends_on:
      - lab-dotnet6-webapi
      - lab-dotnet8-webapi
    ports:
      - "8080:8080"
  
  lab-swagger:
    container_name: lab-swagger
    image: lab-swagger:dev
    build:
      context: ../src
      dockerfile: ../src/lab.swagger/Dockerfile
    #networks:
      #- lab-network
    env_file:
      - ./env-file/swagger-otel.env
    volumes:
      - ./swagger-config/swagger-endpoints.json:/app/swagger-endpoints.json
#    depends_on:
#      - lab-dotnet6-webapi
#      - lab-dotnet7-webapi
#      - lab-dotnet8-webapi
#      - lab-outbound-webapi
  
  lab-dotnet6-webapi:
    container_name: lab-dotnet6-webapi
    image: lab-dotnet6-webapi:dev
    build:
      context: ../src
      dockerfile: ../src/lab.dotnet6.webapi/Dockerfile
    #networks:
      #- lab-network
    env_file:
      - ./env-file/dotnet6-webapi-otel.env
    environment:
      - REDISCONNECTION=redis:6379
      - DBCONNECTION=User ID=postgres;Password=mysecretpassword;Host=postgres;Port=5432;Database=postgres;Pooling=true;
    depends_on:
      - lab-outbound-webapi
      - redis
      - otel-collector-contrib
      - postgres
  
  lab-dotnet8-webapi:
    container_name: lab-dotnet8-webapi
    image: lab-dotnet8-webapi:dev
    build:
      context: ../src
      dockerfile: ../src/lab.dotnet8.webapi/Dockerfile
    #networks:
      #- lab-network
    env_file:
      - ./env-file/dotnet8-webapi-otel.env
    environment:
      - REDISCONNECTION=redis:6379
      - DBCONNECTION=User ID=postgres;Password=mysecretpassword;Host=postgres;Port=5432;Database=postgres;Pooling=true;
    depends_on:
      - lab-outbound-webapi
      - redis
      - otel-collector-contrib
      - postgres
  
  lab-outbound-webapi:
    container_name: lab-outbound-webapi
    image: lab-outbound-webapi:dev
    build:
      context: ../src
      dockerfile: ../src/lab.outbound.webapi/Dockerfile
    #networks:
      #- lab-network
    env_file:
      - ./env-file/outbound-webapi-otel.env
    environment:
      - REDISCONNECTION=redis:6379
      - DBCONNECTION=User ID=postgres;Password=mysecretpassword;Host=postgres;Port=5432;Database=postgres;Pooling=true;
    depends_on:
      - redis
      - postgres

  otel-collector-contrib:
    image: otel/opentelemetry-collector-contrib:0.110.0
    restart: always
    container_name: otel-collector-contrib
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./config/otel-collector-contrib-config.yaml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889"
  
  postgres:
    image: postgres:16-alpine
    restart: always
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      #POSTGRES_USER: $USER_NAME
      #POSTGRES_PASSWORD: $PASSWORD
      #PGDATA: /var/lib/postgresql/data
    volumes:
      #- db-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # copy the sql script to fill tables
      - ./sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    ports:
      - "5432:5432"
    #networks:
      #- lab-network

  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    #networks:
      #- lab-network

  # 以下參考 grafana tempo 範例
  # via: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
#      - ./tempo-data:/tmp/tempo
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.2
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana:10.2.0
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./config/grafana-dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./config/grafana-dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor tempoSearch tempoBackendSearch tempoApmTable
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

  # 以下參考 grafana loki 範例與其他 github 中找到的範本
  # via: https://github.com/grafana/loki/blob/main/examples/getting-started/docker-compose.yaml
  # via: https://github.com/mnadeem/boot-opentelemetry-tempo/blob/main/docker-compose.yaml
  loki:
    container_name: loki
    image: grafana/loki:2.8.2
    command: -config.file=/etc/loki/config.yaml
    ports:
      - 3102:3100
      - 9095:9095
    volumes:
      - ./config/loki-local.yaml:/etc/loki/config.yaml

#networks:
#  lab-network:
#    driver: bridge